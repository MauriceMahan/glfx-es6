{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap fade6b82772c8b18ddcf","webpack:///./src/store.js","webpack:///./src/util.js","webpack:///./src/shader.js","webpack:///./src/filters/common.js","webpack:///./src/matrix.js","webpack:///./src/index.js","webpack:///./src/spline.js","webpack:///./src/texture.js","webpack:///./src/filters/index.js","webpack:///./src/filters/adjust/brightnesscontrast.js","webpack:///./src/filters/adjust/curves.js","webpack:///./src/filters/adjust/denoise.js","webpack:///./src/filters/adjust/huesaturation.js","webpack:///./src/filters/adjust/noise.js","webpack:///./src/filters/adjust/sepia.js","webpack:///./src/filters/adjust/unsharpmask.js","webpack:///./src/filters/adjust/vibrance.js","webpack:///./src/filters/adjust/vignette.js","webpack:///./src/filters/blur/lensblur.js","webpack:///./src/filters/blur/tiltshift.js","webpack:///./src/filters/blur/triangleblur.js","webpack:///./src/filters/blur/zoomblur.js","webpack:///./src/filters/fun/colorhalftone.js","webpack:///./src/filters/fun/dotscreen.js","webpack:///./src/filters/fun/edgework.js","webpack:///./src/filters/fun/hexagonalpixelate.js","webpack:///./src/filters/fun/ink.js","webpack:///./src/filters/warp/bulgepinch.js","webpack:///./src/filters/warp/matrixwarp.js","webpack:///./src/filters/warp/perspective.js","webpack:///./src/filters/warp/swirl.js"],"names":["set","get","store","obj","Object","assign","key","simpleShader","clamp","splineInterpolate","shader","uniforms","textureIn","textureOut","_","texture","use","spareTexture","drawTo","drawRect","swapWith","lo","value","hi","Math","max","min","points","interpolator","SplineInterpolator","array","i","push","floor","interpolate","defaultVertexSource","defaultFragmentSource","Shader","gl","defaultShader","vertexSource","fragmentSource","vertexAttribute","texCoordAttribute","program","createProgram","attachShader","compileSource","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","useProgram","name","hasOwnProperty","location","getUniformLocation","isArray","length","uniform1fv","Float32Array","uniform2fv","uniform3fv","uniform4fv","uniformMatrix3fv","uniformMatrix4fv","isNumber","uniform1f","toString","textures","uniform1i","left","top","right","bottom","viewport","getParameter","VIEWPORT","undefined","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","texCoordBuffer","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLE_STRIP","prototype","call","type","source","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","warpShader","warp","randomShaderFunc","getSquareToQuad","getInverse","multiply","x0","y0","x1","y1","x2","y2","x3","y3","dx1","dy1","dx2","dy2","dx3","dy3","det","a","b","m","c","d","e","f","g","h","filters","wrapTexture","loadContentsOf","element","destroy","Texture","fromElement","initialize","width","height","UNSIGNED_BYTE","getExtension","testTexture","RGBA","extraTexture","flippedShader","isInitialized","draw","getDefaultShader","update","replace","node","parentNode","insertBefore","removeChild","contents","getPixelArray","w","Uint8Array","readPixels","wrap","func","apply","arguments","canvas","document","createElement","getContext","premultipliedAlpha","brightnessContrast","hexagonalPixelate","hueSaturation","colorHalftone","triangleBlur","unsharpMask","perspective","matrixWarp","bulgePinch","tiltShift","dotScreen","edgeWork","lensBlur","zoomBlur","noise","denoise","curves","swirl","ink","vignette","vibrance","sepia","n","xa","ya","u","sort","wx","sig","p","ddydx","x","klo","khi","k","format","id","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","videoWidth","videoHeight","data","deleteTexture","unit","activeTexture","TEXTURE0","callback","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Error","getCanvas","image","size","pixels","createImageData","putImageData","src","toDataURL","other","temp","clearRect","default","brightness","contrast","red","green","blue","splice","initFromBytes","map","exponent","texSize","hue","saturation","amount","radius","strength","ensureFormat","originalTexture","unuse","angle","lensBlurPrePass","common","lensBlur0","lensBlur1","lensBlur2","texture1","dir","PI","sin","cos","power","pow","delta0","delta1","startX","startY","endX","endY","blurRadius","gradientRadius","dx","dy","sqrt","start","end","delta","centerX","centerY","center","scale","edgeWork1","edgeWork2","matrix","inverse","useTextureSpace","Array","concat","before","after"],"mappings":"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","file":"glfx-es6.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fx\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fx\"] = factory();\n\telse\n\t\troot[\"fx\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fade6b82772c8b18ddcf","let store = {}\r\n\r\nexport function set(obj) {\r\n  store = Object.assign(store, obj)\r\n}\r\n\r\nexport function get(key) {\r\n  return store[key]\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/store.js","import SplineInterpolator from './spline'\r\n\r\nexport function simpleShader(shader, uniforms, textureIn, textureOut) {\r\n  (textureIn || this._.texture).use();\r\n  this._.spareTexture.drawTo(function() {\r\n    shader.uniforms(uniforms).drawRect();\r\n  });\r\n  this._.spareTexture.swapWith(textureOut || this._.texture);\r\n}\r\n\r\nexport function clamp(lo, value, hi) {\r\n  return Math.max(lo, Math.min(value, hi));\r\n}\r\n\r\nexport function splineInterpolate(points) {\r\n  var interpolator = new SplineInterpolator(points);\r\n  var array = [];\r\n  for (var i = 0; i < 256; i++) {\r\n    array.push(clamp(0, Math.floor(interpolator.interpolate(i / 255) * 256), 255));\r\n  }\r\n  return array;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.js","import * as store from './store'\r\n\r\nvar defaultVertexSource = '\\\r\nattribute vec2 vertex;\\\r\nattribute vec2 _texCoord;\\\r\nvarying vec2 texCoord;\\\r\nvoid main() {\\\r\n  texCoord = _texCoord;\\\r\n  gl_Position = vec4(vertex * 2.0 - 1.0, 0.0, 1.0);\\\r\n}';\r\n\r\nvar defaultFragmentSource = '\\\r\nuniform sampler2D texture;\\\r\nvarying vec2 texCoord;\\\r\nvoid main() {\\\r\n  gl_FragColor = texture2D(texture, texCoord);\\\r\n}';\r\n\r\n    \r\nexport default class Shader {\r\n\r\n  static getDefaultShader() {\r\n    var gl = store.get('gl')\r\n    gl.defaultShader = gl.defaultShader || new Shader();\r\n    return gl.defaultShader;\r\n  }\r\n  \r\n  constructor(vertexSource, fragmentSource) {\r\n    var gl = store.get('gl')\r\n    this.vertexAttribute = null;\r\n    this.texCoordAttribute = null;\r\n    this.program = gl.createProgram();\r\n    vertexSource = vertexSource || defaultVertexSource;\r\n    fragmentSource = fragmentSource || defaultFragmentSource;\r\n    fragmentSource = 'precision highp float;' + fragmentSource; // annoying requirement is annoying\r\n    gl.attachShader(this.program, compileSource(gl.VERTEX_SHADER, vertexSource));\r\n    gl.attachShader(this.program, compileSource(gl.FRAGMENT_SHADER, fragmentSource));\r\n    gl.linkProgram(this.program);\r\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\r\n      throw 'link error: ' + gl.getProgramInfoLog(this.program);\r\n    }\r\n  }\r\n  \r\n  destroy() {\r\n    var gl = store.get('gl')\r\n    gl.deleteProgram(this.program);\r\n    this.program = null;\r\n  }\r\n  \r\n  uniforms(uniforms) {\r\n    var gl = store.get('gl')\r\n    gl.useProgram(this.program);\r\n    for (var name in uniforms) {\r\n      if (!uniforms.hasOwnProperty(name)) continue;\r\n      var location = gl.getUniformLocation(this.program, name);\r\n      if (location === null) continue; // will be null if the uniform isn't used in the shader\r\n      var value = uniforms[name];\r\n      if (isArray(value)) {\r\n        switch (value.length) {\r\n          case 1: gl.uniform1fv(location, new Float32Array(value)); break;\r\n          case 2: gl.uniform2fv(location, new Float32Array(value)); break;\r\n          case 3: gl.uniform3fv(location, new Float32Array(value)); break;\r\n          case 4: gl.uniform4fv(location, new Float32Array(value)); break;\r\n          case 9: gl.uniformMatrix3fv(location, false, new Float32Array(value)); break;\r\n          case 16: gl.uniformMatrix4fv(location, false, new Float32Array(value)); break;\r\n          default: throw 'dont\\'t know how to load uniform \"' + name + '\" of length ' + value.length;\r\n        }\r\n      } else if (isNumber(value)) {\r\n        gl.uniform1f(location, value);\r\n      } else {\r\n        throw 'attempted to set uniform \"' + name + '\" to invalid value ' + (value || 'undefined').toString();\r\n      }\r\n    }\r\n    // allow chaining\r\n    return this;\r\n  }\r\n  \r\n  // textures are uniforms too but for some reason can't be specified by gl.uniform1f,\r\n  // even though floating point numbers represent the integers 0 through 7 exactly\r\n  textures(textures) {\r\n    var gl = store.get('gl')\r\n    gl.useProgram(this.program);\r\n    for (var name in textures) {\r\n      if (!textures.hasOwnProperty(name)) continue;\r\n      gl.uniform1i(gl.getUniformLocation(this.program, name), textures[name]);\r\n    }\r\n    // allow chaining\r\n    return this;\r\n  }\r\n  \r\n  drawRect(left, top, right, bottom) {\r\n    var gl = store.get('gl')\r\n    var viewport = gl.getParameter(gl.VIEWPORT);\r\n    top = top !== undefined ? (top - viewport[1]) / viewport[3] : 0;\r\n    left = left !== undefined ? (left - viewport[0]) / viewport[2] : 0;\r\n    right = right !== undefined ? (right - viewport[0]) / viewport[2] : 1;\r\n    bottom = bottom !== undefined ? (bottom - viewport[1]) / viewport[3] : 1;\r\n    if (gl.vertexBuffer == null) {\r\n      gl.vertexBuffer = gl.createBuffer();\r\n    }\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.vertexBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ left, top, left, bottom, right, top, right, bottom ]), gl.STATIC_DRAW);\r\n    if (gl.texCoordBuffer == null) {\r\n      gl.texCoordBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, gl.texCoordBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0, 0, 0, 1, 1, 0, 1, 1 ]), gl.STATIC_DRAW);\r\n    }\r\n    if (this.vertexAttribute == null) {\r\n      this.vertexAttribute = gl.getAttribLocation(this.program, 'vertex');\r\n      gl.enableVertexAttribArray(this.vertexAttribute);\r\n    }\r\n    if (this.texCoordAttribute == null) {\r\n      this.texCoordAttribute = gl.getAttribLocation(this.program, '_texCoord');\r\n      gl.enableVertexAttribArray(this.texCoordAttribute);\r\n    }\r\n    gl.useProgram(this.program);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.vertexBuffer);\r\n    gl.vertexAttribPointer(this.vertexAttribute, 2, gl.FLOAT, false, 0, 0);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.texCoordBuffer);\r\n    gl.vertexAttribPointer(this.texCoordAttribute, 2, gl.FLOAT, false, 0, 0);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n  }\r\n  \r\n}\r\n\r\nfunction isArray(obj) {\r\n  return Object.prototype.toString.call(obj) == '[object Array]';\r\n}\r\n\r\nfunction isNumber(obj) {\r\n  return Object.prototype.toString.call(obj) == '[object Number]';\r\n}\r\n\r\nfunction compileSource(type, source) {\r\n  var gl = store.get('gl')\r\n  var shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    throw 'compile error: ' + gl.getShaderInfoLog(shader);\r\n  }\r\n  return shader;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/shader.js","import Shader from '../shader'\r\n\r\nexport function warpShader(uniforms, warp) {\r\n  return new Shader(null, uniforms + '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec2 coord = texCoord * texSize;\\\r\n      ' + warp + '\\\r\n      gl_FragColor = texture2D(texture, coord / texSize);\\\r\n      vec2 clampedCoord = clamp(coord, vec2(0.0), texSize);\\\r\n      if (coord != clampedCoord) {\\\r\n        /* fade to transparent if we are outside the image */\\\r\n        gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\\\r\n      }\\\r\n    }'\r\n  );\r\n}\r\n\r\n// returns a random number between 0 and 1\r\nexport const randomShaderFunc = '\\\r\n  float random(vec3 scale, float seed) {\\\r\n    /* use the fragment position for a different seed per-pixel */\\\r\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\\\r\n  }\\\r\n';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/common.js","// from javax.media.jai.PerspectiveTransform\r\n\r\nexport function getSquareToQuad(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n  var dx1 = x1 - x2;\r\n  var dy1 = y1 - y2;\r\n  var dx2 = x3 - x2;\r\n  var dy2 = y3 - y2;\r\n  var dx3 = x0 - x1 + x2 - x3;\r\n  var dy3 = y0 - y1 + y2 - y3;\r\n  var det = dx1*dy2 - dx2*dy1;\r\n  var a = (dx3*dy2 - dx2*dy3) / det;\r\n  var b = (dx1*dy3 - dx3*dy1) / det;\r\n  return [\r\n    x1 - x0 + a*x1, y1 - y0 + a*y1, a,\r\n    x3 - x0 + b*x3, y3 - y0 + b*y3, b,\r\n    x0, y0, 1\r\n  ];\r\n}\r\n\r\nexport function getInverse(m) {\r\n  var a = m[0], b = m[1], c = m[2];\r\n  var d = m[3], e = m[4], f = m[5];\r\n  var g = m[6], h = m[7], i = m[8];\r\n  var det = a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;\r\n  return [\r\n    (e*i - f*h) / det, (c*h - b*i) / det, (b*f - c*e) / det,\r\n    (f*g - d*i) / det, (a*i - c*g) / det, (c*d - a*f) / det,\r\n    (d*h - e*g) / det, (b*g - a*h) / det, (a*e - b*d) / det\r\n  ];\r\n}\r\n\r\nexport function multiply(a, b) {\r\n  return [\r\n    a[0]*b[0] + a[1]*b[3] + a[2]*b[6],\r\n    a[0]*b[1] + a[1]*b[4] + a[2]*b[7],\r\n    a[0]*b[2] + a[1]*b[5] + a[2]*b[8],\r\n    a[3]*b[0] + a[4]*b[3] + a[5]*b[6],\r\n    a[3]*b[1] + a[4]*b[4] + a[5]*b[7],\r\n    a[3]*b[2] + a[4]*b[5] + a[5]*b[8],\r\n    a[6]*b[0] + a[7]*b[3] + a[8]*b[6],\r\n    a[6]*b[1] + a[7]*b[4] + a[8]*b[7],\r\n    a[6]*b[2] + a[7]*b[5] + a[8]*b[8]\r\n  ];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/matrix.js","import * as store from './store'\r\nimport Texture from './texture'\r\nimport Shader from './shader'\r\nimport * as filters from './filters'\r\nexport {splineInterpolate} from './util'\r\n\r\nfunction wrapTexture(texture) {\r\n  return {\r\n    _: texture,\r\n    loadContentsOf: function(element) {\r\n      // Make sure that we're using the correct global WebGL context\r\n      store.set({gl: this._.gl});\r\n      this._.loadContentsOf(element);\r\n    },\r\n    destroy: function() {\r\n      // Make sure that we're using the correct global WebGL context\r\n      store.set({gl: this._.gl});\r\n      this._.destroy();\r\n    }\r\n  };\r\n}\r\n\r\nfunction texture(element) {\r\n  return wrapTexture(Texture.fromElement(element));\r\n}\r\n\r\nfunction initialize(width, height) {\r\n  var gl = store.get('gl')\r\n  var type = gl.UNSIGNED_BYTE;\r\n\r\n  // Go for floating point buffer textures if we can, it'll make the bokeh\r\n  // filter look a lot better. Note that on Windows, ANGLE does not let you\r\n  // render to a floating-point texture when linear filtering is enabled.\r\n  // See http://crbug.com/172278 for more information.\r\n  if (gl.getExtension('OES_texture_float') && gl.getExtension('OES_texture_float_linear')) {\r\n    var testTexture = new Texture(100, 100, gl.RGBA, gl.FLOAT);\r\n    try {\r\n      // Only use gl.FLOAT if we can render to it\r\n      testTexture.drawTo(function() { type = gl.FLOAT; });\r\n    } catch (e) {}\r\n    testTexture.destroy();\r\n  }\r\n\r\n  if (this._.texture) this._.texture.destroy();\r\n  if (this._.spareTexture) this._.spareTexture.destroy();\r\n  this.width = width;\r\n  this.height = height;\r\n  this._.texture = new Texture(width, height, gl.RGBA, type);\r\n  this._.spareTexture = new Texture(width, height, gl.RGBA, type);\r\n  this._.extraTexture = this._.extraTexture || new Texture(0, 0, gl.RGBA, type);\r\n  this._.flippedShader = this._.flippedShader || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      gl_FragColor = texture2D(texture, vec2(texCoord.x, 1.0 - texCoord.y));\\\r\n    }\\\r\n  ');\r\n  this._.isInitialized = true;\r\n}\r\n\r\n/*\r\n   Draw a texture to the canvas, with an optional width and height to scale to.\r\n   If no width and height are given then the original texture width and height\r\n   are used.\r\n*/\r\nfunction draw(texture, width, height) {\r\n  if (!this._.isInitialized || texture._.width != this.width || texture._.height != this.height) {\r\n    initialize.call(this, width ? width : texture._.width, height ? height : texture._.height);\r\n  }\r\n\r\n  texture._.use();\r\n  this._.texture.drawTo(function() {\r\n    Shader.getDefaultShader().drawRect();\r\n  });\r\n\r\n  return this;\r\n}\r\n\r\nfunction update() {\r\n  this._.texture.use();\r\n  this._.flippedShader.drawRect();\r\n  return this;\r\n}\r\n\r\nfunction replace(node) {\r\n  node.parentNode.insertBefore(this, node);\r\n  node.parentNode.removeChild(node);\r\n  return this;\r\n}\r\n\r\nfunction contents() {\r\n  var gl = store.get('gl')\r\n  var texture = new Texture(this._.texture.width, this._.texture.height, gl.RGBA, gl.UNSIGNED_BYTE);\r\n  this._.texture.use();\r\n  texture.drawTo(function() {\r\n    Shader.getDefaultShader().drawRect();\r\n  });\r\n  return wrapTexture(texture);\r\n}\r\n\r\n/*\r\n   Get a Uint8 array of pixel values: [r, g, b, a, r, g, b, a, ...]\r\n   Length of the array will be width * height * 4.\r\n*/\r\nfunction getPixelArray() {\r\n  var gl = store.get('gl')\r\n  var w = this._.texture.width;\r\n  var h = this._.texture.height;\r\n  var array = new Uint8Array(w * h * 4);\r\n  this._.texture.drawTo(function() {\r\n    gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, array);\r\n  });\r\n  return array;\r\n}\r\n\r\nfunction wrap(func) {\r\n  return function() {\r\n    // Make sure that we're using the correct global WebGL context\r\n    store.set({gl: this._.gl});\r\n\r\n    // Now that the context has been switched, we can call the wrapped function\r\n    return func.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport default {\r\n  canvas() {\r\n    var canvas = document.createElement('canvas');\r\n    try {\r\n      store.set({gl: canvas.getContext('experimental-webgl', { premultipliedAlpha: false })});\r\n    } catch (e) {\r\n      store.set({gl: null});\r\n    }\r\n    var gl = store.get('gl')\r\n    if (!gl) {\r\n      throw 'This browser does not support WebGL';\r\n    }\r\n    canvas._ = {\r\n        gl: gl,\r\n        isInitialized: false,\r\n        texture: null,\r\n        spareTexture: null,\r\n        flippedShader: null\r\n    };\r\n\r\n    // Core methods\r\n    canvas.texture = wrap(texture);\r\n    canvas.draw = wrap(draw);\r\n    canvas.update = wrap(update);\r\n    canvas.replace = wrap(replace);\r\n    canvas.contents = wrap(contents);\r\n    canvas.getPixelArray = wrap(getPixelArray);\r\n    \r\n    // // Filter methods\r\n    canvas.brightnessContrast = wrap(filters.brightnessContrast);\r\n    canvas.hexagonalPixelate = wrap(filters.hexagonalPixelate);\r\n    canvas.hueSaturation = wrap(filters.hueSaturation);\r\n    canvas.colorHalftone = wrap(filters.colorHalftone);\r\n    canvas.triangleBlur = wrap(filters.triangleBlur);\r\n    canvas.unsharpMask = wrap(filters.unsharpMask);\r\n    canvas.perspective = wrap(filters.perspective);\r\n    canvas.matrixWarp = wrap(filters.matrixWarp);\r\n    canvas.bulgePinch = wrap(filters.bulgePinch);\r\n    canvas.tiltShift = wrap(filters.tiltShift);\r\n    canvas.dotScreen = wrap(filters.dotScreen);\r\n    canvas.edgeWork = wrap(filters.edgeWork);\r\n    canvas.lensBlur = wrap(filters.lensBlur);\r\n    canvas.zoomBlur = wrap(filters.zoomBlur);\r\n    canvas.noise = wrap(filters.noise);\r\n    canvas.denoise = wrap(filters.denoise);\r\n    canvas.curves = wrap(filters.curves);\r\n    canvas.swirl = wrap(filters.swirl);\r\n    canvas.ink = wrap(filters.ink);\r\n    canvas.vignette = wrap(filters.vignette);\r\n    canvas.vibrance = wrap(filters.vibrance);\r\n    canvas.sepia = wrap(filters.sepia);\r\n\r\n    return canvas;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// from SplineInterpolator.cs in the Paint.NET source code\r\n\r\nexport default class SplineInterpolator {\r\n  \r\n  constructor(points) {\r\n    var n = points.length;\r\n    this.xa = [];\r\n    this.ya = [];\r\n    this.u = [];\r\n    this.y2 = [];\r\n\r\n    points.sort(function(a, b) {\r\n      return a[0] - b[0];\r\n    });\r\n    for (var i = 0; i < n; i++) {\r\n      this.xa.push(points[i][0]);\r\n      this.ya.push(points[i][1]);\r\n    }\r\n\r\n    this.u[0] = 0;\r\n    this.y2[0] = 0;\r\n\r\n    for (var i = 1; i < n - 1; ++i) {\r\n      // This is the decomposition loop of the tridiagonal algorithm.\r\n      // y2 and u are used for temporary storage of the decomposed factors.\r\n      var wx = this.xa[i + 1] - this.xa[i - 1];\r\n      var sig = (this.xa[i] - this.xa[i - 1]) / wx;\r\n      var p = sig * this.y2[i - 1] + 2.0;\r\n\r\n      this.y2[i] = (sig - 1.0) / p;\r\n\r\n      var ddydx =\r\n          (this.ya[i + 1] - this.ya[i]) / (this.xa[i + 1] - this.xa[i]) -\r\n          (this.ya[i] - this.ya[i - 1]) / (this.xa[i] - this.xa[i - 1]);\r\n\r\n      this.u[i] = (6.0 * ddydx / wx - sig * this.u[i - 1]) / p;\r\n    }\r\n\r\n    this.y2[n - 1] = 0;\r\n\r\n    // This is the backsubstitution loop of the tridiagonal algorithm\r\n    for (var i = n - 2; i >= 0; --i) {\r\n      this.y2[i] = this.y2[i] * this.y2[i + 1] + this.u[i];\r\n    }\r\n  }\r\n  \r\n  interpolate(x) {\r\n    var n = this.ya.length;\r\n    var klo = 0;\r\n    var khi = n - 1;\r\n\r\n    // We will find the right place in the table by means of\r\n    // bisection. This is optimal if sequential calls to this\r\n    // routine are at random values of x. If sequential calls\r\n    // are in order, and closely spaced, one would do better\r\n    // to store previous values of klo and khi.\r\n    while (khi - klo > 1) {\r\n      var k = (khi + klo) >> 1;\r\n\r\n      if (this.xa[k] > x) {\r\n        khi = k;\r\n      } else {\r\n        klo = k;\r\n      }\r\n    }\r\n\r\n    var h = this.xa[khi] - this.xa[klo];\r\n    var a = (this.xa[khi] - x) / h;\r\n    var b = (x - this.xa[klo]) / h;\r\n\r\n    // Cubic spline polynomial is now evaluated.\r\n    return a * this.ya[klo] + b * this.ya[khi] +\r\n      ((a * a * a - a) * this.y2[klo] + (b * b * b - b) * this.y2[khi]) * (h * h) / 6.0;\r\n  }\r\n  \r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/spline.js","import * as store from './store'\r\nimport Shader from './shader'\r\n\r\nvar canvas = null;\r\n\r\nexport default class Texture {\r\n  \r\n  static fromElement(element) {\r\n    var gl = store.get('gl')\r\n    var texture = new Texture(0, 0, gl.RGBA, gl.UNSIGNED_BYTE);\r\n    texture.loadContentsOf(element);\r\n    return texture;\r\n  }\r\n  \r\n  constructor(width, height, format, type) {\r\n    var gl = store.get('gl')\r\n    this.gl = gl;\r\n    this.id = gl.createTexture();\r\n    this.width = width;\r\n    this.height = height;\r\n    this.format = format;\r\n    this.type = type;\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    if (width && height) gl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, this.type, null);\r\n  }\r\n  \r\n  loadContentsOf(element) {\r\n    var gl = store.get('gl')\r\n    this.width = element.width || element.videoWidth;\r\n    this.height = element.height || element.videoHeight;\r\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, element);\r\n  }\r\n  \r\n  initFromBytes(width, height, data) {\r\n    var gl = store.get('gl')\r\n    this.width = width;\r\n    this.height = height;\r\n    this.format = gl.RGBA;\r\n    this.type = gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, this.type, new Uint8Array(data));\r\n  }\r\n  \r\n  destroy() {\r\n    var gl = store.get('gl')\r\n    gl.deleteTexture(this.id);\r\n    this.id = null;\r\n  }\r\n  \r\n  use(unit) {\r\n    var gl = store.get('gl')\r\n    gl.activeTexture(gl.TEXTURE0 + (unit || 0));\r\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n  }\r\n  \r\n  unuse(unit) {\r\n    var gl = store.get('gl')\r\n    gl.activeTexture(gl.TEXTURE0 + (unit || 0));\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n  }\r\n  \r\n  ensureFormat(width, height, format, type) {\r\n    // allow passing an existing texture instead of individual arguments\r\n    if (arguments.length == 1) {\r\n      var texture = arguments[0];\r\n      width = texture.width;\r\n      height = texture.height;\r\n      format = texture.format;\r\n      type = texture.type;\r\n    }\r\n\r\n    // change the format only if required\r\n    if (width != this.width || height != this.height || format != this.format || type != this.type) {\r\n      var gl = store.get('gl')\r\n      this.width = width;\r\n      this.height = height;\r\n      this.format = format;\r\n      this.type = type;\r\n      gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, this.type, null);\r\n    }\r\n  }\r\n  \r\n  drawTo(callback) {\r\n    var gl = store.get('gl')\r\n    // start rendering to this texture\r\n    gl.framebuffer = gl.framebuffer || gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, gl.framebuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.id, 0);\r\n    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {\r\n        throw new Error('incomplete framebuffer');\r\n    }\r\n    gl.viewport(0, 0, this.width, this.height);\r\n\r\n    // do the drawing\r\n    callback();\r\n\r\n    // stop rendering to this texture\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n  }\r\n  \r\n  fillUsingCanvas(callback) {\r\n    callback(getCanvas(this));\r\n    var gl = store.get('gl')\r\n    this.format = gl.RGBA;\r\n    this.type = gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\r\n    return this;\r\n  }\r\n\r\n  toImage(image) {\r\n    this.use();\r\n    Shader.getDefaultShader().drawRect();\r\n    var gl = store.get('gl')\r\n    var size = this.width * this.height * 4;\r\n    var pixels = new Uint8Array(size);\r\n    var c = getCanvas(this);\r\n    var data = c.createImageData(this.width, this.height);\r\n    gl.readPixels(0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n    for (var i = 0; i < size; i++) {\r\n        data.data[i] = pixels[i];\r\n    }\r\n    c.putImageData(data, 0, 0);\r\n    image.src = canvas.toDataURL();\r\n  }\r\n\r\n  swapWith(other) {\r\n    var temp;\r\n    temp = other.id; other.id = this.id; this.id = temp;\r\n    temp = other.width; other.width = this.width; this.width = temp;\r\n    temp = other.height; other.height = this.height; this.height = temp;\r\n    temp = other.format; other.format = this.format; this.format = temp;\r\n  }\r\n}\r\n\r\nfunction getCanvas(texture) {\r\n  if (canvas == null) canvas = document.createElement('canvas');\r\n  canvas.width = texture.width;\r\n  canvas.height = texture.height;\r\n  var c = canvas.getContext('2d');\r\n  c.clearRect(0, 0, canvas.width, canvas.height);\r\n  return c;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/texture.js","export {default as brightnessContrast} from './adjust/brightnesscontrast'\r\nexport {default as curves} from './adjust/curves'\r\nexport {default as denoise} from './adjust/denoise'\r\nexport {default as hueSaturation} from './adjust/huesaturation'\r\nexport {default as noise} from './adjust/noise'\r\nexport {default as sepia} from './adjust/sepia'\r\nexport {default as unsharpMask} from './adjust/unsharpmask'\r\nexport {default as vibrance} from './adjust/vibrance'\r\nexport {default as vignette} from './adjust/vignette'\r\n\r\nexport {default as lensBlur} from './blur/lensblur'\r\nexport {default as tiltShift} from './blur/tiltshift'\r\nexport {default as triangleBlur} from './blur/triangleblur'\r\nexport {default as zoomBlur} from './blur/zoomblur'\r\n\r\nexport {default as colorHalftone} from './fun/colorhalftone'\r\nexport {default as dotScreen} from './fun/dotscreen'\r\nexport {default as edgeWork} from './fun/edgework'\r\nexport {default as hexagonalPixelate} from './fun/hexagonalpixelate'\r\nexport {default as ink} from './fun/ink'\r\n\r\nexport {default as bulgePinch} from './warp/bulgepinch'\r\nexport {default as matrixWarp} from './warp/matrixwarp'\r\nexport {default as perspective} from './warp/perspective'\r\nexport {default as swirl} from './warp/swirl'\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/index.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter           Brightness / Contrast\r\n * @description      Provides additive brightness and multiplicative contrast control.\r\n * @param brightness -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\r\n * @param contrast   -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\r\n */\r\nexport default function(brightness, contrast) {\r\n  var gl = store.get('gl')\r\n  gl.brightnessContrast = gl.brightnessContrast || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float brightness;\\\r\n    uniform float contrast;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      color.rgb += brightness;\\\r\n      if (contrast > 0.0) {\\\r\n        color.rgb = (color.rgb - 0.5) / (1.0 - contrast) + 0.5;\\\r\n      } else {\\\r\n        color.rgb = (color.rgb - 0.5) * (1.0 + contrast) + 0.5;\\\r\n      }\\\r\n      gl_FragColor = color;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.brightnessContrast, {\r\n    brightness: clamp(-1, brightness, 1),\r\n    contrast: clamp(-1, contrast, 1)\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/brightnesscontrast.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp, splineInterpolate} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter      Curves\r\n * @description A powerful mapping tool that transforms the colors in the image\r\n *              by an arbitrary function. The function is interpolated between\r\n *              a set of 2D points using splines. The curves filter can take\r\n *              either one or three arguments which will apply the mapping to\r\n *              either luminance or RGB values, respectively.\r\n * @param red   A list of points that define the function for the red channel.\r\n *              Each point is a list of two values: the value before the mapping\r\n *              and the value after the mapping, both in the range 0 to 1. For\r\n *              example, [[0,1], [1,0]] would invert the red channel while\r\n *              [[0,0], [1,1]] would leave the red channel unchanged. If green\r\n *              and blue are omitted then this argument also applies to the\r\n *              green and blue channels.\r\n * @param green (optional) A list of points that define the function for the green\r\n *              channel (just like for red).\r\n * @param blue  (optional) A list of points that define the function for the blue\r\n *              channel (just like for red).\r\n */\r\nexport default function(red, green, blue) {\r\n  var gl = store.get('gl')\r\n  // Create the ramp texture\r\n  red = splineInterpolate(red);\r\n  if (arguments.length == 1) {\r\n    green = blue = red;\r\n  } else {\r\n    green = splineInterpolate(green);\r\n    blue = splineInterpolate(blue);\r\n  }\r\n  var array = [];\r\n  for (var i = 0; i < 256; i++) {\r\n    array.splice(array.length, 0, red[i], green[i], blue[i], 255);\r\n  }\r\n  this._.extraTexture.initFromBytes(256, 1, array);\r\n  this._.extraTexture.use(1);\r\n\r\n  gl.curves = gl.curves || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform sampler2D map;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      color.r = texture2D(map, vec2(color.r)).r;\\\r\n      color.g = texture2D(map, vec2(color.g)).g;\\\r\n      color.b = texture2D(map, vec2(color.b)).b;\\\r\n      gl_FragColor = color;\\\r\n    }\\\r\n  ');\r\n\r\n  gl.curves.textures({\r\n    map: 1\r\n  });\r\n  simpleShader.call(this, gl.curves, {});\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/curves.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Denoise\r\n * @description    Smooths over grainy noise in dark images using an 9x9 box filter\r\n *                 weighted by color intensity, similar to a bilateral filter.\r\n * @param exponent The exponent of the color intensity difference, should be greater\r\n *                 than zero. A value of zero just gives an 9x9 box blur and high values\r\n *                 give the original image, but ideal values are usually around 10-20.\r\n */\r\nexport default function(exponent) {\r\n  var gl = store.get('gl')\r\n  // Do a 9x9 bilateral box filter\r\n  gl.denoise = gl.denoise || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float exponent;\\\r\n    uniform float strength;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 center = texture2D(texture, texCoord);\\\r\n      vec4 color = vec4(0.0);\\\r\n      float total = 0.0;\\\r\n      for (float x = -4.0; x <= 4.0; x += 1.0) {\\\r\n        for (float y = -4.0; y <= 4.0; y += 1.0) {\\\r\n          vec4 sample = texture2D(texture, texCoord + vec2(x, y) / texSize);\\\r\n          float weight = 1.0 - abs(dot(sample.rgb - center.rgb, vec3(0.25)));\\\r\n          weight = pow(weight, exponent);\\\r\n          color += sample * weight;\\\r\n          total += weight;\\\r\n        }\\\r\n      }\\\r\n      gl_FragColor = color / total;\\\r\n    }\\\r\n  ');\r\n\r\n  // Perform two iterations for stronger results\r\n  for (var i = 0; i < 2; i++) {\r\n    simpleShader.call(this, gl.denoise, {\r\n      exponent: Math.max(0, exponent),\r\n      texSize: [this.width, this.height]\r\n    });\r\n  }\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/denoise.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter           Hue / Saturation\r\n * @description      Provides rotational hue and multiplicative saturation control. RGB color space\r\n *                   can be imagined as a cube where the axes are the red, green, and blue color\r\n *                   values. Hue changing works by rotating the color vector around the grayscale\r\n *                   line, which is the straight line from black (0, 0, 0) to white (1, 1, 1).\r\n *                   Saturation is implemented by scaling all color channel values either toward\r\n *                   or away from the average color channel value.\r\n * @param hue        -1 to 1 (-1 is 180 degree rotation in the negative direction, 0 is no change,\r\n *                   and 1 is 180 degree rotation in the positive direction)\r\n * @param saturation -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\r\n */\r\nexport default function(hue, saturation) {\r\n  var gl = store.get('gl')\r\n  gl.hueSaturation = gl.hueSaturation || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float hue;\\\r\n    uniform float saturation;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      \\\r\n      /* hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}] */\\\r\n      float angle = hue * 3.14159265;\\\r\n      float s = sin(angle), c = cos(angle);\\\r\n      vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\\\r\n      float len = length(color.rgb);\\\r\n      color.rgb = vec3(\\\r\n        dot(color.rgb, weights.xyz),\\\r\n        dot(color.rgb, weights.zxy),\\\r\n        dot(color.rgb, weights.yzx)\\\r\n      );\\\r\n      \\\r\n      /* saturation adjustment */\\\r\n      float average = (color.r + color.g + color.b) / 3.0;\\\r\n      if (saturation > 0.0) {\\\r\n        color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - saturation));\\\r\n      } else {\\\r\n        color.rgb += (average - color.rgb) * (-saturation);\\\r\n      }\\\r\n      \\\r\n      gl_FragColor = color;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.hueSaturation, {\r\n    hue: clamp(-1, hue, 1),\r\n    saturation: clamp(-1, saturation, 1)\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/huesaturation.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Noise\r\n * @description    Adds black and white noise to the image.\r\n * @param amount   0 to 1 (0 for no effect, 1 for maximum noise)\r\n */\r\nexport default function(amount) {\r\n  var gl = store.get('gl')\r\n  gl.noise = gl.noise || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float amount;\\\r\n    varying vec2 texCoord;\\\r\n    float rand(vec2 co) {\\\r\n      return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\\r\n    }\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      \\\r\n      float diff = (rand(texCoord) - 0.5) * amount;\\\r\n      color.r += diff;\\\r\n      color.g += diff;\\\r\n      color.b += diff;\\\r\n      \\\r\n      gl_FragColor = color;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.noise, {\r\n    amount: clamp(0, amount, 1)\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/noise.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Sepia\r\n * @description    Gives the image a reddish-brown monochrome tint that imitates an old photograph.\r\n * @param amount   0 to 1 (0 for no effect, 1 for full sepia coloring)\r\n */\r\nexport default function(amount) {\r\n  var gl = store.get('gl')\r\n  gl.sepia = gl.sepia || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float amount;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      float r = color.r;\\\r\n      float g = color.g;\\\r\n      float b = color.b;\\\r\n      \\\r\n      color.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\\\r\n      color.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\\\r\n      color.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\\\r\n      \\\r\n      gl_FragColor = color;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.sepia, {\r\n    amount: clamp(0, amount, 1)\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/sepia.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Unsharp Mask\r\n * @description    A form of image sharpening that amplifies high-frequencies in the image. It\r\n *                 is implemented by scaling pixels away from the average of their neighbors.\r\n * @param radius   The blur radius that calculates the average of the neighboring pixels.\r\n * @param strength A scale factor where 0 is no effect and higher values cause a stronger effect.\r\n */\r\nexport default function(radius, strength) {\r\n  var gl = store.get('gl')\r\n  gl.unsharpMask = gl.unsharpMask || new Shader(null, '\\\r\n    uniform sampler2D blurredTexture;\\\r\n    uniform sampler2D originalTexture;\\\r\n    uniform float strength;\\\r\n    uniform float threshold;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 blurred = texture2D(blurredTexture, texCoord);\\\r\n      vec4 original = texture2D(originalTexture, texCoord);\\\r\n      gl_FragColor = mix(blurred, original, 1.0 + strength);\\\r\n    }\\\r\n  ');\r\n\r\n  // Store a copy of the current texture in the second texture unit\r\n  this._.extraTexture.ensureFormat(this._.texture);\r\n  this._.texture.use();\r\n  this._.extraTexture.drawTo(function() {\r\n    Shader.getDefaultShader().drawRect();\r\n  });\r\n\r\n  // Blur the current texture, then use the stored texture to detect edges\r\n  this._.extraTexture.use(1);\r\n  this.triangleBlur(radius);\r\n  gl.unsharpMask.textures({\r\n    originalTexture: 1\r\n  });\r\n  simpleShader.call(this, gl.unsharpMask, {\r\n    strength: strength\r\n  });\r\n  this._.extraTexture.unuse(1);\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/unsharpmask.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter       Vibrance\r\n * @description  Modifies the saturation of desaturated colors, leaving saturated colors unmodified.\r\n * @param amount -1 to 1 (-1 is minimum vibrance, 0 is no change, and 1 is maximum vibrance)\r\n */\r\nexport default function(amount) {\r\n  var gl = store.get('gl')\r\n  gl.vibrance = gl.vibrance || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float amount;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      float average = (color.r + color.g + color.b) / 3.0;\\\r\n      float mx = max(color.r, max(color.g, color.b));\\\r\n      float amt = (mx - average) * (-amount * 3.0);\\\r\n      color.rgb = mix(color.rgb, vec3(mx), amt);\\\r\n      gl_FragColor = color;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.vibrance, {\r\n    amount: clamp(-1, amount, 1)\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/vibrance.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Vignette\r\n * @description    Adds a simulated lens edge darkening effect.\r\n * @param size     0 to 1 (0 for center of frame, 1 for edge of frame)\r\n * @param amount   0 to 1 (0 for no effect, 1 for maximum lens darkening)\r\n */\r\nexport default function(size, amount) {\r\n  var gl = store.get('gl')\r\n  gl.vignette = gl.vignette || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float size;\\\r\n    uniform float amount;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      \\\r\n      float dist = distance(texCoord, vec2(0.5, 0.5));\\\r\n      color.rgb *= smoothstep(0.8, size * 0.799, dist * (amount + size));\\\r\n      \\\r\n      gl_FragColor = color;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.vignette, {\r\n    size: clamp(0, size, 1),\r\n    amount: clamp(0, amount, 1)\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/adjust/vignette.js","import Shader from '../../shader'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport {randomShaderFunc} from '../common'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter           Lens Blur\r\n * @description      Imitates a camera capturing the image out of focus by using a blur that generates\r\n *                   the large shapes known as bokeh. The polygonal shape of real bokeh is due to the\r\n *                   blades of the aperture diaphragm when it isn't fully open. This blur renders\r\n *                   bokeh from a 6-bladed diaphragm because the computation is more efficient. It\r\n *                   can be separated into three rhombi, each of which is just a skewed box blur.\r\n *                   This filter makes use of the floating point texture WebGL extension to implement\r\n *                   the brightness parameter, so there will be severe visual artifacts if brightness\r\n *                   is non-zero and the floating point texture extension is not available. The\r\n *                   idea was from John White's SIGGRAPH 2011 talk but this effect has an additional\r\n *                   brightness parameter that fakes what would otherwise come from a HDR source.\r\n * @param radius     the radius of the hexagonal disk convolved with the image\r\n * @param brightness -1 to 1 (the brightness of the bokeh, negative values will create dark bokeh)\r\n * @param angle      the rotation of the bokeh in radians\r\n */\r\nexport default function(radius, brightness, angle) {\r\n  var gl = store.get('gl')\r\n  // All averaging is done on values raised to a power to make more obvious bokeh\r\n  // (we will raise the average to the inverse power at the end to compensate).\r\n  // Without this the image looks almost like a normal blurred image. This hack is\r\n  // obviously not realistic, but to accurately simulate this we would need a high\r\n  // dynamic range source photograph which we don't have.\r\n  gl.lensBlurPrePass = gl.lensBlurPrePass || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float power;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      color = pow(color, vec4(power));\\\r\n      gl_FragColor = vec4(color);\\\r\n    }\\\r\n  ');\r\n\r\n  var common = '\\\r\n    uniform sampler2D texture0;\\\r\n    uniform sampler2D texture1;\\\r\n    uniform vec2 delta0;\\\r\n    uniform vec2 delta1;\\\r\n    uniform float power;\\\r\n    varying vec2 texCoord;\\\r\n    ' + randomShaderFunc + '\\\r\n    vec4 sample(vec2 delta) {\\\r\n      /* randomize the lookup values to hide the fixed number of samples */\\\r\n      float offset = random(vec3(delta, 151.7182), 0.0);\\\r\n      \\\r\n      vec4 color = vec4(0.0);\\\r\n      float total = 0.0;\\\r\n      for (float t = 0.0; t <= 30.0; t++) {\\\r\n        float percent = (t + offset) / 30.0;\\\r\n        color += texture2D(texture0, texCoord + delta * percent);\\\r\n        total += 1.0;\\\r\n      }\\\r\n      return color / total;\\\r\n    }\\\r\n  ';\r\n\r\n  gl.lensBlur0 = gl.lensBlur0 || new Shader(null, common + '\\\r\n    void main() {\\\r\n      gl_FragColor = sample(delta0);\\\r\n    }\\\r\n  ');\r\n  gl.lensBlur1 = gl.lensBlur1 || new Shader(null, common + '\\\r\n    void main() {\\\r\n      gl_FragColor = (sample(delta0) + sample(delta1)) * 0.5;\\\r\n    }\\\r\n  ');\r\n  gl.lensBlur2 = gl.lensBlur2 || new Shader(null, common + '\\\r\n    void main() {\\\r\n      vec4 color = (sample(delta0) + 2.0 * texture2D(texture1, texCoord)) / 3.0;\\\r\n      gl_FragColor = pow(color, vec4(power));\\\r\n    }\\\r\n  ').textures({ texture1: 1 });\r\n\r\n  // Generate\r\n  var dir = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    var a = angle + i * Math.PI * 2 / 3;\r\n    dir.push([radius * Math.sin(a) / this.width, radius * Math.cos(a) / this.height]);\r\n  }\r\n  var power = Math.pow(10, clamp(-1, brightness, 1));\r\n\r\n  // Remap the texture values, which will help make the bokeh effect\r\n  simpleShader.call(this, gl.lensBlurPrePass, {\r\n    power: power\r\n  });\r\n\r\n  // Blur two rhombi in parallel into extraTexture\r\n  this._.extraTexture.ensureFormat(this._.texture);\r\n  simpleShader.call(this, gl.lensBlur0, {\r\n    delta0: dir[0]\r\n  }, this._.texture, this._.extraTexture);\r\n  simpleShader.call(this, gl.lensBlur1, {\r\n    delta0: dir[1],\r\n    delta1: dir[2]\r\n  }, this._.extraTexture, this._.extraTexture);\r\n\r\n  // Blur the last rhombus and combine with extraTexture\r\n  simpleShader.call(this, gl.lensBlur0, {\r\n    delta0: dir[1]\r\n  });\r\n  this._.extraTexture.use(1);\r\n  simpleShader.call(this, gl.lensBlur2, {\r\n    power: 1 / power,\r\n    delta0: dir[2]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/blur/lensblur.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport {randomShaderFunc} from '../common'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter               Tilt Shift\r\n * @description          Simulates the shallow depth of field normally encountered in close-up\r\n *                       photography, which makes the scene seem much smaller than it actually\r\n *                       is. This filter assumes the scene is relatively planar, in which case\r\n *                       the part of the scene that is completely in focus can be described by\r\n *                       a line (the intersection of the focal plane and the scene). An example\r\n *                       of a planar scene might be looking at a road from above at a downward\r\n *                       angle. The image is then blurred with a blur radius that starts at zero\r\n *                       on the line and increases further from the line.\r\n * @param startX         The x coordinate of the start of the line segment.\r\n * @param startY         The y coordinate of the start of the line segment.\r\n * @param endX           The x coordinate of the end of the line segment.\r\n * @param endY           The y coordinate of the end of the line segment.\r\n * @param blurRadius     The maximum radius of the pyramid blur.\r\n * @param gradientRadius The distance from the line at which the maximum blur radius is reached.\r\n */\r\nexport default function(startX, startY, endX, endY, blurRadius, gradientRadius) {\r\n  var gl = store.get('gl')\r\n  gl.tiltShift = gl.tiltShift || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float blurRadius;\\\r\n    uniform float gradientRadius;\\\r\n    uniform vec2 start;\\\r\n    uniform vec2 end;\\\r\n    uniform vec2 delta;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    ' + randomShaderFunc + '\\\r\n    void main() {\\\r\n      vec4 color = vec4(0.0);\\\r\n      float total = 0.0;\\\r\n      \\\r\n      /* randomize the lookup values to hide the fixed number of samples */\\\r\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\\r\n      \\\r\n      vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\\\r\n      float radius = smoothstep(0.0, 1.0, abs(dot(texCoord * texSize - start, normal)) / gradientRadius) * blurRadius;\\\r\n      for (float t = -30.0; t <= 30.0; t++) {\\\r\n        float percent = (t + offset - 0.5) / 30.0;\\\r\n        float weight = 1.0 - abs(percent);\\\r\n        vec4 sample = texture2D(texture, texCoord + delta / texSize * percent * radius);\\\r\n        \\\r\n        /* switch to pre-multiplied alpha to correctly blur transparent images */\\\r\n        sample.rgb *= sample.a;\\\r\n        \\\r\n        color += sample * weight;\\\r\n        total += weight;\\\r\n      }\\\r\n      \\\r\n      gl_FragColor = color / total;\\\r\n      \\\r\n      /* switch back from pre-multiplied alpha */\\\r\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\\\r\n    }\\\r\n  ');\r\n\r\n  var dx = endX - startX;\r\n  var dy = endY - startY;\r\n  var d = Math.sqrt(dx * dx + dy * dy);\r\n  simpleShader.call(this, gl.tiltShift, {\r\n    blurRadius: blurRadius,\r\n    gradientRadius: gradientRadius,\r\n    start: [startX, startY],\r\n    end: [endX, endY],\r\n    delta: [dx / d, dy / d],\r\n    texSize: [this.width, this.height]\r\n  });\r\n  simpleShader.call(this, gl.tiltShift, {\r\n    blurRadius: blurRadius,\r\n    gradientRadius: gradientRadius,\r\n    start: [startX, startY],\r\n    end: [endX, endY],\r\n    delta: [-dy / d, dx / d],\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/blur/tiltshift.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport {randomShaderFunc} from '../common'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter       Triangle Blur\r\n * @description  This is the most basic blur filter, which convolves the image with a\r\n *               pyramid filter. The pyramid filter is separable and is applied as two\r\n *               perpendicular triangle filters.\r\n * @param radius The radius of the pyramid convolved with the image.\r\n */\r\nexport default function(radius) {\r\n  var gl = store.get('gl')\r\n  gl.triangleBlur = gl.triangleBlur || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 delta;\\\r\n    varying vec2 texCoord;\\\r\n    ' + randomShaderFunc + '\\\r\n    void main() {\\\r\n      vec4 color = vec4(0.0);\\\r\n      float total = 0.0;\\\r\n      \\\r\n      /* randomize the lookup values to hide the fixed number of samples */\\\r\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\\r\n      \\\r\n      for (float t = -30.0; t <= 30.0; t++) {\\\r\n        float percent = (t + offset - 0.5) / 30.0;\\\r\n        float weight = 1.0 - abs(percent);\\\r\n        vec4 sample = texture2D(texture, texCoord + delta * percent);\\\r\n        \\\r\n        /* switch to pre-multiplied alpha to correctly blur transparent images */\\\r\n        sample.rgb *= sample.a;\\\r\n        \\\r\n        color += sample * weight;\\\r\n        total += weight;\\\r\n      }\\\r\n      \\\r\n      gl_FragColor = color / total;\\\r\n      \\\r\n      /* switch back from pre-multiplied alpha */\\\r\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.triangleBlur, {\r\n    delta: [radius / this.width, 0]\r\n  });\r\n  simpleShader.call(this, gl.triangleBlur, {\r\n    delta: [0, radius / this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/blur/triangleblur.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport {randomShaderFunc} from '../common'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Zoom Blur\r\n * @description    Blurs the image away from a certain point, which looks like radial motion blur.\r\n * @param centerX  The x coordinate of the blur origin.\r\n * @param centerY  The y coordinate of the blur origin.\r\n * @param strength The strength of the blur. Values in the range 0 to 1 are usually sufficient,\r\n *                 where 0 doesn't change the image and 1 creates a highly blurred image.\r\n */\r\nexport default function(centerX, centerY, strength) {\r\n  var gl = store.get('gl')\r\n  gl.zoomBlur = gl.zoomBlur || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 center;\\\r\n    uniform float strength;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    ' + randomShaderFunc + '\\\r\n    void main() {\\\r\n      vec4 color = vec4(0.0);\\\r\n      float total = 0.0;\\\r\n      vec2 toCenter = center - texCoord * texSize;\\\r\n      \\\r\n      /* randomize the lookup values to hide the fixed number of samples */\\\r\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\\r\n      \\\r\n      for (float t = 0.0; t <= 40.0; t++) {\\\r\n        float percent = (t + offset) / 40.0;\\\r\n        float weight = 4.0 * (percent - percent * percent);\\\r\n        vec4 sample = texture2D(texture, texCoord + toCenter * percent * strength / texSize);\\\r\n        \\\r\n        /* switch to pre-multiplied alpha to correctly blur transparent images */\\\r\n        sample.rgb *= sample.a;\\\r\n        \\\r\n        color += sample * weight;\\\r\n        total += weight;\\\r\n      }\\\r\n      \\\r\n      gl_FragColor = color / total;\\\r\n      \\\r\n      /* switch back from pre-multiplied alpha */\\\r\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.zoomBlur, {\r\n    center: [centerX, centerY],\r\n    strength: strength,\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/blur/zoomblur.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter        Color Halftone\r\n * @description   Simulates a CMYK halftone rendering of the image by multiplying pixel values\r\n *                with a four rotated 2D sine wave patterns, one each for cyan, magenta, yellow,\r\n *                and black.\r\n * @param centerX The x coordinate of the pattern origin.\r\n * @param centerY The y coordinate of the pattern origin.\r\n * @param angle   The rotation of the pattern in radians.\r\n * @param size    The diameter of a dot in pixels.\r\n */\r\nexport default function(centerX, centerY, angle, size) {\r\n  var gl = store.get('gl')\r\n  gl.colorHalftone = gl.colorHalftone || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 center;\\\r\n    uniform float angle;\\\r\n    uniform float scale;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    \\\r\n    float pattern(float angle) {\\\r\n      float s = sin(angle), c = cos(angle);\\\r\n      vec2 tex = texCoord * texSize - center;\\\r\n      vec2 point = vec2(\\\r\n        c * tex.x - s * tex.y,\\\r\n        s * tex.x + c * tex.y\\\r\n      ) * scale;\\\r\n      return (sin(point.x) * sin(point.y)) * 4.0;\\\r\n    }\\\r\n    \\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      vec3 cmy = 1.0 - color.rgb;\\\r\n      float k = min(cmy.x, min(cmy.y, cmy.z));\\\r\n      cmy = (cmy - k) / (1.0 - k);\\\r\n      cmy = clamp(cmy * 10.0 - 3.0 + vec3(pattern(angle + 0.26179), pattern(angle + 1.30899), pattern(angle)), 0.0, 1.0);\\\r\n      k = clamp(k * 10.0 - 5.0 + pattern(angle + 0.78539), 0.0, 1.0);\\\r\n      gl_FragColor = vec4(1.0 - cmy - k, color.a);\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.colorHalftone, {\r\n    center: [centerX, centerY],\r\n    angle: angle,\r\n    scale: Math.PI / size,\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/fun/colorhalftone.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter        Dot Screen\r\n * @description   Simulates a black and white halftone rendering of the image by multiplying\r\n *                pixel values with a rotated 2D sine wave pattern.\r\n * @param centerX The x coordinate of the pattern origin.\r\n * @param centerY The y coordinate of the pattern origin.\r\n * @param angle   The rotation of the pattern in radians.\r\n * @param size    The diameter of a dot in pixels.\r\n */\r\nexport default function(centerX, centerY, angle, size) {\r\n  var gl = store.get('gl')\r\n  gl.dotScreen = gl.dotScreen || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 center;\\\r\n    uniform float angle;\\\r\n    uniform float scale;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    \\\r\n    float pattern() {\\\r\n      float s = sin(angle), c = cos(angle);\\\r\n      vec2 tex = texCoord * texSize - center;\\\r\n      vec2 point = vec2(\\\r\n        c * tex.x - s * tex.y,\\\r\n        s * tex.x + c * tex.y\\\r\n      ) * scale;\\\r\n      return (sin(point.x) * sin(point.y)) * 4.0;\\\r\n    }\\\r\n    \\\r\n    void main() {\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      float average = (color.r + color.g + color.b) / 3.0;\\\r\n      gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.dotScreen, {\r\n    center: [centerX, centerY],\r\n    angle: angle,\r\n    scale: Math.PI / size,\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/fun/dotscreen.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport {randomShaderFunc} from '../common'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter       Edge Work\r\n * @description  Picks out different frequencies in the image by subtracting two\r\n *               copies of the image blurred with different radii.\r\n * @param radius The radius of the effect in pixels.\r\n */\r\nexport default function(radius) {\r\n  var gl = store.get('gl')\r\n  gl.edgeWork1 = gl.edgeWork1 || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 delta;\\\r\n    varying vec2 texCoord;\\\r\n    ' + randomShaderFunc + '\\\r\n    void main() {\\\r\n      vec2 color = vec2(0.0);\\\r\n      vec2 total = vec2(0.0);\\\r\n      \\\r\n      /* randomize the lookup values to hide the fixed number of samples */\\\r\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\\r\n      \\\r\n      for (float t = -30.0; t <= 30.0; t++) {\\\r\n        float percent = (t + offset - 0.5) / 30.0;\\\r\n        float weight = 1.0 - abs(percent);\\\r\n        vec3 sample = texture2D(texture, texCoord + delta * percent).rgb;\\\r\n        float average = (sample.r + sample.g + sample.b) / 3.0;\\\r\n        color.x += average * weight;\\\r\n        total.x += weight;\\\r\n        if (abs(t) < 15.0) {\\\r\n          weight = weight * 2.0 - 1.0;\\\r\n          color.y += average * weight;\\\r\n          total.y += weight;\\\r\n        }\\\r\n      }\\\r\n      gl_FragColor = vec4(color / total, 0.0, 1.0);\\\r\n    }\\\r\n  ');\r\n  \r\n  gl.edgeWork2 = gl.edgeWork2 || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 delta;\\\r\n    varying vec2 texCoord;\\\r\n    ' + randomShaderFunc + '\\\r\n    void main() {\\\r\n      vec2 color = vec2(0.0);\\\r\n      vec2 total = vec2(0.0);\\\r\n      \\\r\n      /* randomize the lookup values to hide the fixed number of samples */\\\r\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\\r\n      \\\r\n      for (float t = -30.0; t <= 30.0; t++) {\\\r\n        float percent = (t + offset - 0.5) / 30.0;\\\r\n        float weight = 1.0 - abs(percent);\\\r\n        vec2 sample = texture2D(texture, texCoord + delta * percent).xy;\\\r\n        color.x += sample.x * weight;\\\r\n        total.x += weight;\\\r\n        if (abs(t) < 15.0) {\\\r\n          weight = weight * 2.0 - 1.0;\\\r\n          color.y += sample.y * weight;\\\r\n          total.y += weight;\\\r\n        }\\\r\n      }\\\r\n      float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);\\\r\n      gl_FragColor = vec4(c, c, c, 1.0);\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.edgeWork1, {\r\n    delta: [radius / this.width, 0]\r\n  });\r\n  simpleShader.call(this, gl.edgeWork2, {\r\n    delta: [0, radius / this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/fun/edgework.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter        Hexagonal Pixelate\r\n * @description   Renders the image using a pattern of hexagonal tiles. Tile colors\r\n *                are nearest-neighbor sampled from the centers of the tiles.\r\n * @param centerX The x coordinate of the pattern center.\r\n * @param centerY The y coordinate of the pattern center.\r\n * @param scale   The width of an individual tile, in pixels.\r\n */\r\nexport default function(centerX, centerY, scale) {\r\n  var gl = store.get('gl')\r\n  gl.hexagonalPixelate = gl.hexagonalPixelate || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform vec2 center;\\\r\n    uniform float scale;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec2 tex = (texCoord * texSize - center) / scale;\\\r\n      tex.y /= 0.866025404;\\\r\n      tex.x -= tex.y * 0.5;\\\r\n      \\\r\n      vec2 a;\\\r\n      if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) a = vec2(floor(tex.x), floor(tex.y));\\\r\n      else a = vec2(ceil(tex.x), ceil(tex.y));\\\r\n      vec2 b = vec2(ceil(tex.x), floor(tex.y));\\\r\n      vec2 c = vec2(floor(tex.x), ceil(tex.y));\\\r\n      \\\r\n      vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);\\\r\n      vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);\\\r\n      vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);\\\r\n      vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);\\\r\n      \\\r\n      float alen = length(TEX - A);\\\r\n      float blen = length(TEX - B);\\\r\n      float clen = length(TEX - C);\\\r\n      \\\r\n      vec2 choice;\\\r\n      if (alen < blen) {\\\r\n        if (alen < clen) choice = a;\\\r\n        else choice = c;\\\r\n      } else {\\\r\n        if (blen < clen) choice = b;\\\r\n        else choice = c;\\\r\n      }\\\r\n      \\\r\n      choice.x += choice.y * 0.5;\\\r\n      choice.y *= 0.866025404;\\\r\n      choice *= scale / texSize;\\\r\n      gl_FragColor = texture2D(texture, choice + center / texSize);\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.hexagonalPixelate, {\r\n    center: [centerX, centerY],\r\n    scale: scale,\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/fun/hexagonalpixelate.js","import Shader from '../../shader'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Ink\r\n * @description    Simulates outlining the image in ink by darkening edges stronger than a\r\n *                 certain threshold. The edge detection value is the difference of two\r\n *                 copies of the image, each blurred using a blur of a different radius.\r\n * @param strength The multiplicative scale of the ink edges. Values in the range 0 to 1\r\n *                 are usually sufficient, where 0 doesn't change the image and 1 adds lots\r\n *                 of black edges. Negative strength values will create white ink edges\r\n *                 instead of black ones.\r\n */\r\nexport default function(strength) {\r\n  var gl = store.get('gl');\r\n  gl.ink = gl.ink || new Shader(null, '\\\r\n    uniform sampler2D texture;\\\r\n    uniform float strength;\\\r\n    uniform vec2 texSize;\\\r\n    varying vec2 texCoord;\\\r\n    void main() {\\\r\n      vec2 dx = vec2(1.0 / texSize.x, 0.0);\\\r\n      vec2 dy = vec2(0.0, 1.0 / texSize.y);\\\r\n      vec4 color = texture2D(texture, texCoord);\\\r\n      float bigTotal = 0.0;\\\r\n      float smallTotal = 0.0;\\\r\n      vec3 bigAverage = vec3(0.0);\\\r\n      vec3 smallAverage = vec3(0.0);\\\r\n      for (float x = -2.0; x <= 2.0; x += 1.0) {\\\r\n        for (float y = -2.0; y <= 2.0; y += 1.0) {\\\r\n          vec3 sample = texture2D(texture, texCoord + dx * x + dy * y).rgb;\\\r\n          bigAverage += sample;\\\r\n          bigTotal += 1.0;\\\r\n          if (abs(x) + abs(y) < 2.0) {\\\r\n            smallAverage += sample;\\\r\n            smallTotal += 1.0;\\\r\n          }\\\r\n        }\\\r\n      }\\\r\n      vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\\\r\n      gl_FragColor = vec4(color.rgb - dot(edge, edge) * strength * 100000.0, color.a);\\\r\n    }\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.ink, {\r\n    strength: strength * strength * strength * strength * strength,\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/fun/ink.js","import {warpShader} from '../common'\r\nimport {simpleShader, clamp} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter         Bulge / Pinch\r\n * @description    Bulges or pinches the image in a circle.\r\n * @param centerX  The x coordinate of the center of the circle of effect.\r\n * @param centerY  The y coordinate of the center of the circle of effect.\r\n * @param radius   The radius of the circle of effect.\r\n * @param strength -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\r\n */\r\nexport default function(centerX, centerY, radius, strength) {\r\n  var gl = store.get('gl')\r\n  gl.bulgePinch = gl.bulgePinch || warpShader('\\\r\n    uniform float radius;\\\r\n    uniform float strength;\\\r\n    uniform vec2 center;\\\r\n  ', '\\\r\n    coord -= center;\\\r\n    float distance = length(coord);\\\r\n    if (distance < radius) {\\\r\n      float percent = distance / radius;\\\r\n      if (strength > 0.0) {\\\r\n        coord *= mix(1.0, smoothstep(0.0, radius / distance, percent), strength * 0.75);\\\r\n      } else {\\\r\n        coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\\\r\n      }\\\r\n    }\\\r\n    coord += center;\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.bulgePinch, {\r\n    radius: radius,\r\n    strength: clamp(-1, strength, 1),\r\n    center: [centerX, centerY],\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/warp/bulgepinch.js","import {warpShader} from '../common'\r\nimport {getInverse} from '../../matrix'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter                Matrix Warp\r\n * @description           Transforms an image by a 2x2 or 3x3 matrix. The coordinates used in\r\n *                        the transformation are (x, y) for a 2x2 matrix or (x, y, 1) for a\r\n *                        3x3 matrix, where x and y are in units of pixels.\r\n * @param matrix          A 2x2 or 3x3 matrix represented as either a list or a list of lists.\r\n *                        For example, the 3x3 matrix [[2,0,0],[0,3,0],[0,0,1]] can also be\r\n *                        represented as [2,0,0,0,3,0,0,0,1] or just [2,0,0,3].\r\n * @param inverse         A boolean value that, when true, applies the inverse transformation\r\n *                        instead. (optional, defaults to false)\r\n * @param useTextureSpace A boolean value that, when true, uses texture-space coordinates\r\n *                        instead of screen-space coordinates. Texture-space coordinates range\r\n *                        from -1 to 1 instead of 0 to width - 1 or height - 1, and are easier\r\n *                        to use for simple operations like flipping and rotating.\r\n */\r\nexport default function(matrix, inverse, useTextureSpace) {\r\n  var gl = store.get('gl');\r\n  gl.matrixWarp = gl.matrixWarp || warpShader('\\\r\n    uniform mat3 matrix;\\\r\n    uniform bool useTextureSpace;\\\r\n  ', '\\\r\n    if (useTextureSpace) coord = coord / texSize * 2.0 - 1.0;\\\r\n    vec3 warp = matrix * vec3(coord, 1.0);\\\r\n    coord = warp.xy / warp.z;\\\r\n    if (useTextureSpace) coord = (coord * 0.5 + 0.5) * texSize;\\\r\n  ');\r\n\r\n  // Flatten all members of matrix into one big list\r\n  matrix = Array.prototype.concat.apply([], matrix);\r\n\r\n  // Extract a 3x3 matrix out of the arguments\r\n  if (matrix.length == 4) {\r\n    matrix = [\r\n      matrix[0], matrix[1], 0,\r\n      matrix[2], matrix[3], 0,\r\n      0, 0, 1\r\n    ];\r\n  } else if (matrix.length != 9) {\r\n    throw 'can only warp with 2x2 or 3x3 matrix';\r\n  }\r\n\r\n  simpleShader.call(this, gl.matrixWarp, {\r\n    matrix: inverse ? getInverse(matrix) : matrix,\r\n    texSize: [this.width, this.height],\r\n    useTextureSpace: useTextureSpace | 0\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/warp/matrixwarp.js","import {getSquareToQuad, multiply, getInverse} from '../../matrix'\r\n\r\n/**\r\n * @filter       Perspective\r\n * @description  Warps one quadrangle to another with a perspective transform. This can be used to\r\n *               make a 2D image look 3D or to recover a 2D image captured in a 3D environment.\r\n * @param before The x and y coordinates of four points before the transform in a flat list. This\r\n *               would look like [ax, ay, bx, by, cx, cy, dx, dy] for four points (ax, ay), (bx, by),\r\n *               (cx, cy), and (dx, dy).\r\n * @param after  The x and y coordinates of four points after the transform in a flat list, just\r\n *               like the other argument.\r\n */\r\nexport default function(before, after) {\r\n  var a = getSquareToQuad.apply(null, after);\r\n  var b = getSquareToQuad.apply(null, before);\r\n  var c = multiply(getInverse(a), b);\r\n  return this.matrixWarp(c);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/warp/perspective.js","import {warpShader} from '../common'\r\nimport {simpleShader} from '../../util'\r\nimport * as store from '../../store'\r\n\r\n/**\r\n * @filter        Swirl\r\n * @description   Warps a circular region of the image in a swirl.\r\n * @param centerX The x coordinate of the center of the circular region.\r\n * @param centerY The y coordinate of the center of the circular region.\r\n * @param radius  The radius of the circular region.\r\n * @param angle   The angle in radians that the pixels in the center of\r\n *                the circular region will be rotated by.\r\n */\r\nexport default function(centerX, centerY, radius, angle) {\r\n  var gl = store.get('gl');\r\n  gl.swirl = gl.swirl || warpShader('\\\r\n    uniform float radius;\\\r\n    uniform float angle;\\\r\n    uniform vec2 center;\\\r\n  ', '\\\r\n    coord -= center;\\\r\n    float distance = length(coord);\\\r\n    if (distance < radius) {\\\r\n      float percent = (radius - distance) / radius;\\\r\n      float theta = percent * percent * angle;\\\r\n      float s = sin(theta);\\\r\n      float c = cos(theta);\\\r\n      coord = vec2(\\\r\n        coord.x * c - coord.y * s,\\\r\n        coord.x * s + coord.y * c\\\r\n      );\\\r\n    }\\\r\n    coord += center;\\\r\n  ');\r\n\r\n  simpleShader.call(this, gl.swirl, {\r\n    radius: radius,\r\n    center: [centerX, centerY],\r\n    angle: angle,\r\n    texSize: [this.width, this.height]\r\n  });\r\n\r\n  return this;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters/warp/swirl.js"],"sourceRoot":""}